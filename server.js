const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const cors = require('cors');

const app = express();
const PORT = 3000;

// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∏ chat_id
const TELEGRAM_BOT_TOKEN = '8025673149:AAF-DoHcIIfpwFB23FVZWqFxWk98isN96dI';
const TELEGRAM_CHAT_ID = '5103411502';

app.use(cors());
app.use(bodyParser.json());
app.use(express.static('.')); // Serve static files from current directory

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø–∏—Å–µ–π (–≤ –ø–∞–º—è—Ç–∏)
let bookings = [];

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–∑—ã–≤–æ–≤ (–≤ –ø–∞–º—è—Ç–∏ - –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–∞ –ë–î)
let reviews = [];

const timeSlots = [
    '10:00', '11:00', '12:00', '13:00', '14:00',
    '15:00', '16:00', '17:00', '18:00', '19:00'
];

function getNext14Days() {
    const dates = [];
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    for (let i = 0; i < 14; i++) {
        const current = new Date(today);
        current.setDate(today.getDate() + i);
        dates.push(current.toISOString().split('T')[0]);
    }
    return dates;
}

function generateSlotsStatusTable(allBookings) {
    let message = '–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:\n```\n';
    const dates = getNext14Days();

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    let header = '–í—Ä–µ–º—è';
    dates.forEach(date => {
        const d = new Date(date);
        header += ` | ${d.toLocaleDateString('ru-RU', { weekday: 'short', day: 'numeric' })}`;
    });
    message += `${header}\n`;

    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    let separator = '------';
    dates.forEach(() => { separator += ' | -------'; });
    message += `${separator}\n`;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    timeSlots.forEach(slotTime => {
        let row = slotTime;
        dates.forEach(date => {
            const isBooked = allBookings.some(b => b.date === date && b.time === slotTime);
            row += ` | ${isBooked ? '–ó–∞–Ω—è—Ç–æ' : '–°–≤–æ–±–æ–¥–Ω–æ'}`;
        });
        message += `${row}\n`;
    });

    message += '```';
    return message;
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
app.get('/bookings', (req, res) => {
    res.json(bookings);
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã (—Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ)
app.get('/reviews', (req, res) => {
    const approvedReviews = reviews.filter(review => review.status === 'approved');
    res.json(approvedReviews);
});

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
app.post('/review', async (req, res) => {
    const { name, text, rating } = req.body;
    if (!name || !text || !rating) {
        return res.status(400).json({ error: '–ò–º—è, —Ç–µ–∫—Å—Ç –∏ –æ—Ü–µ–Ω–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const newReview = { 
        id: Date.now().toString(),
        name, 
        text, 
        rating, 
        timestamp: new Date().toISOString(),
        status: 'pending', // pending, approved, rejected
        reply: null
    };
    reviews.push(newReview);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ –¥–ª—è Telegram
    const reviewMessage = `*–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤:*\n\n` +
        `üë§ –ò–º—è: ${name}\n` +
        `‚≠ê –û—Ü–µ–Ω–∫–∞: ${'‚òÖ'.repeat(rating)}${'‚òÜ'.repeat(5 - rating)}\n` +
        `üìù –¢–µ–∫—Å—Ç: ${text}\n\n` +
        `–î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: /approve_${newReview.id}\n` +
        `–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: /reject_${newReview.id}`;

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
        await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: TELEGRAM_CHAT_ID,
            text: reviewMessage,
            parse_mode: 'Markdown'
        });
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –≤ Telegram:', e.message);
    }

    res.status(201).json({ success: true, review: newReview });
});

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
app.post('/book', async (req, res) => {
    const { name, phone, service, date, time, telegramUsername } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const exists = bookings.find(b => b.date === date && b.time === time);
    if (exists) {
        return res.status(409).json({ error: '–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ' });
    }

    const booking = { name, phone, service, date, time, telegramUsername };
    bookings.push(booking);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è Telegram
    const newBookingMessage = `*–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:*\n\n` +
        `üë§ –ò–º—è: ${name}\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n` +
        `üì≤ Telegram: ${telegramUsername || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üíÖ –£—Å–ª—É–≥–∞: ${service || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
        `üìÖ –î–∞—Ç–∞: ${date}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${time}`;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    const slotsStatusMessage = generateSlotsStatusTable(bookings);

    try {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...');
        console.log('–¢–æ–∫–µ–Ω –±–æ—Ç–∞:', TELEGRAM_BOT_TOKEN);
        console.log('Chat ID:', TELEGRAM_CHAT_ID);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        const bookingResponse = await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: TELEGRAM_CHAT_ID,
            text: newBookingMessage,
            parse_mode: 'Markdown'
        });
        console.log('–û—Ç–≤–µ—Ç –æ—Ç Telegram (–∑–∞–ø–∏—Å—å):', bookingResponse.data);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        const statusResponse = await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: TELEGRAM_CHAT_ID,
            text: slotsStatusMessage,
            parse_mode: 'Markdown'
        });
        console.log('–û—Ç–≤–µ—Ç –æ—Ç Telegram (—Å—Ç–∞—Ç—É—Å):', statusResponse.data);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', e.message);
        if (e.response) {
            console.error('–û—Ç–≤–µ—Ç –æ—Ç Telegram API:', e.response.data);
        }
    }
    res.json({ success: true });
});

// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
app.delete('/bookings', (req, res) => {
    const { date, time } = req.body;
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å: –î–∞—Ç–∞ = ${date}, –í—Ä–µ–º—è = ${time}`);
    const initialLength = bookings.length;
    bookings = bookings.filter(b => !(b.date === date && b.time === time));
    
    if (bookings.length === initialLength) {
        return res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    res.json({ success: true });
});

// –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
app.post('/review/:id/reply', async (req, res) => {
    const { id } = req.params;
    const { reply } = req.body;
    
    const review = reviews.find(r => r.id === id);
    if (!review) {
        return res.status(404).json({ error: '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    review.reply = reply;
    review.replyTimestamp = new Date().toISOString();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–≤–µ—Ç–µ
    const replyMessage = `*–û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤:*\n\n` +
        `üë§ –û—Ç–∑—ã–≤ –æ—Ç: ${review.name}\n` +
        `‚≠ê –û—Ü–µ–Ω–∫–∞: ${'‚òÖ'.repeat(review.rating)}${'‚òÜ'.repeat(5 - review.rating)}\n` +
        `üìù –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: ${review.text}\n\n` +
        `üí¨ –û—Ç–≤–µ—Ç: ${reply}`;

    try {
        await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: TELEGRAM_CHAT_ID,
            text: replyMessage,
            parse_mode: 'Markdown'
        });
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram:', e.message);
    }

    res.json({ success: true, review });
});

app.listen(process.env.PORT || PORT, () => {
    console.log(`Server started on http://localhost:${process.env.PORT || PORT}`);
});